// Generated by CoffeeScript 1.10.0
(function() {
  var Eureca, app, bodyparser, eurecaServer, express, game, path, server;

  path = require('path');

  express = require('express');

  app = exports.app = express();

  Eureca = require('eureca.io');

  eurecaServer = exports.Eureca = new Eureca.Server({
    allow: ['setFingerprint', 'clientDisconnect', 'spawnEnemy', 'updateState']
  });

  app.use(express["static"](path.join(__dirname, 'public')));

  app.set('view engine', 'jade');

  app.use(require('express-session')({
    secret: '1234567890QWERTY',
    resave: true,
    saveUninitialized: true
  }));

  app.use(require('cookie-parser')());

  bodyparser = require('body-parser');

  app.use(bodyparser.json());

  app.use(bodyparser.urlencoded({
    extended: true
  }));

  app.use('/', require('./routes'));

  game = exports.game = require('./models/Game');

  app.set('port', process.env.PORT || 5000);

  server = app.listen(app.get('port'), function() {
    var host, port;
    host = server.address().address;
    port = app.get('port');
    return console.log("Application server running at http://" + host + ":" + port);
  });

  eurecaServer.attach(server);

  eurecaServer.onConnect(function(conn) {
    var remote;
    console.log("New client connected with id: " + conn.id, conn.remoteAddress);
    remote = eurecaServer.getClient(conn.id);
    game.addPlayer(conn.id, remote);
    return remote.setFingerprint(conn.id);
  });

  eurecaServer.onDisconnect(function(conn) {
    var fingerprint, player, ref, results;
    console.log("Client disconnected with id: " + conn.id);
    game.removePlayer(conn.id);
    ref = game.players;
    results = [];
    for (fingerprint in ref) {
      player = ref[fingerprint];
      results.push(player.remote.clientDisconnect(conn.id));
    }
    return results;
  });


  /* Here's where we'll export some server functions the client can call */

  eurecaServer.exports.handshake = function() {
    var fingerprint, laststate, player, ref, ref1, results, x, y;
    console.log("In handshake,", game.players);
    ref = game.players;
    results = [];
    for (fingerprint in ref) {
      player = ref[fingerprint];
      console.log("Spawning " + fingerprint + " on client " + this.connection.id);
      laststate = player.laststate;
      ref1 = laststate ? [laststate.x, laststate.y] : [0, 0], x = ref1[0], y = ref1[1];
      results.push(player.remote.spawnEnemy(player.id, x, y));
    }
    return results;
  };

  eurecaServer.exports.handleKeys = function(keys) {
    var conn, fingerprint, player, ref, results, updatedClient;
    conn = this.connection;
    updatedClient = game.players[conn.id];
    ref = game.players;
    results = [];
    for (fingerprint in ref) {
      player = ref[fingerprint];
      player.remote.updateState(updatedClient.id, keys);
      results.push(player.laststate = keys);
    }
    return results;
  };

}).call(this);
