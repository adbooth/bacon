// Generated by CoffeeScript 1.10.0

/* eurecaServer.coffee */

(function() {
  var Eureca, eurecaServer, game;

  Eureca = require('eureca.io');

  game = require('./app').game;

  eurecaServer = new Eureca.Server({
    allow: ['handshakeToClient', 'peerDisconnect', 'addPeer', 'updateState']
  });

  eurecaServer.attach(require('./app').server);


  /** onConnect
   * On client connect, start the handshake
   * This sends the client some initialization data
   */

  eurecaServer.onConnect(function(conn) {
    var ref, x, y;
    console.log("Connected with " + conn.id);
    ref = game.generateXY(), x = ref[0], y = ref[1];
    return eurecaServer.getClient(conn.id).handshakeToClient({
      fingerprint: conn.id,
      gameSize: game.gameSize,
      x: x,
      y: y
    });
  });


  /** handshakeToServer
   * Called in client setup function
   * Gets client up to speed
   */

  eurecaServer.exports.handshakeToServer = function(payload) {
    var fingerprint, laststate, player, ref, ref1, remote, requester, requesterFingerprint, results, x, y;
    requesterFingerprint = this.connection.id;
    remote = eurecaServer.getClient(requesterFingerprint);
    requester = game.addPlayer(requesterFingerprint, remote, payload.username, payload.x, payload.y);
    ref = game.players;
    results = [];
    for (fingerprint in ref) {
      player = ref[fingerprint];
      if (fingerprint !== requesterFingerprint) {
        player.remote.addPeer(requesterFingerprint, requester.username, requester.x, requester.y);
        laststate = player.laststate;
        ref1 = laststate ? [laststate.x, laststate.y] : [0, 0], x = ref1[0], y = ref1[1];
        results.push(requester.remote.addPeer(fingerprint, player.username, x, y));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };


  /** handleKeys
   * Called in `Player`'s `update()` function
   * Updates state of all players' simulations after another player input/update
   */

  eurecaServer.exports.handleKeys = function(keys) {
    var fingerprint, player, ref, results, updatedClient;
    updatedClient = game.players[this.connection.id];
    ref = game.players;
    results = [];
    for (fingerprint in ref) {
      player = ref[fingerprint];
      player.remote.updateState(updatedClient.fingerprint, keys);
      results.push(player.laststate = keys);
    }
    return results;
  };


  /** onDisconnect
   * On client disconnect, remove client from client list and broadcast disconnect
   */

  eurecaServer.onDisconnect(function(conn) {
    var fingerprint, player, ref, results;
    console.log("Disconnected with " + conn.id);
    game.removePlayer(conn.id);
    ref = game.players;
    results = [];
    for (fingerprint in ref) {
      player = ref[fingerprint];
      results.push(player.remote.peerDisconnect(conn.id));
    }
    return results;
  });

}).call(this);
